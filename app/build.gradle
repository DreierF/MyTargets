/*
 * Copyright (C) 2017 Florian Dreier
 *
 * This file is part of MyTargets.
 *
 * MyTargets is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * MyTargets is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

import com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.triplet.play'
apply plugin: 'jacoco-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.google.firebase.firebase-crash'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion compileSdkVersionCode
    buildToolsVersion buildToolsVersionCode

    defaultConfig {
        applicationId 'de.dreier.mytargets'
        minSdkVersion 14
        targetSdkVersion 25
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        debug {
        }
        release {
            try {
                storeFile file('../keystore.jks')
                storePassword project.hasProperty('KEYSTORE_PASSWORD') ? KEYSTORE_PASSWORD : System.getenv('KEYSTORE_PASSWORD')
                keyAlias 'mytargets'
                keyPassword project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : System.getenv('KEY_PASSWORD')
            } catch (ignored) {
                throw new InvalidUserDataException('You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.')
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), '../proguard-rules.pro'
        }
    }

    productFlavors {
        regular {}
        screengrab {}
    }
}

/*
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
tasks.withType(DataBindingExportBuildInfoTask) { task ->
    if (task.name.endsWith('AndroidTest')) {
        task.finalizedBy(tasks.create("${task.name}Workaround") << {
            task.output.deleteDir()
        })
    }
}

task renameFolders {
    file('app/src/main/play/ca-ES').renameTo(file('app/src/main/play/ca'))
    file('app/src/main/play/sk-SK').renameTo(file('app/src/main/play/sk'))
    file('app/src/main/play/sl-SI').renameTo(file('app/src/main/play/sl'))
}

def CROWDIN_API_KEY = project.hasProperty('CROWDIN_API_KEY') ? CROWDIN_API_KEY : System.getenv('CROWDIN_API_KEY')
if (CROWDIN_API_KEY != null && !CROWDIN_API_KEY.isEmpty()) {
    tasks.whenTaskAdded { task ->
        if (task.name.equals("generateRegularReleasePlayResources")) {
            task.dependsOn(':crowdinDownload')
            task.dependsOn renameFolders
            task.doLast {
                file('app/src/main/play/ca').renameTo(file('app/src/main/play/ca-ES'))
                file('app/src/main/play/sk').renameTo(file('app/src/main/play/sk-SK'))
                file('app/src/main/play/sl').renameTo(file('app/src/main/play/sl-SI'))
            }
        }
    }

    task generateLocalizedScreenshots(type: Exec, group: 'play store', dependsOn: [':crowdinDownload', 'assembleScreengrabDebugAndroidTest', 'assembleScreengrabDebug']) {
        workingDir '..'
        commandLine './make_screenshots.sh'
    }

    if (new File('googlePlayAndroidDeveloper.json').exists()) {
        play {
            jsonFile = file('../googlePlayAndroidDeveloper.json')
        }
    }
}

/*
* Workaround for https://code.google.com/p/android/issues/detail?id=71365
* */
def buildConfigAndResStringField(variant, name, value) {
    variant.resValue 'string', name.toLowerCase(), value
    variant.buildConfigField 'String', name, "\"$value\""
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
        variant.resValue 'string', 'content_authority', variant.applicationId + ".provider"
        buildConfigAndResStringField variant, "ACCOUNT_TYPE", variant.applicationId
        buildConfigAndResStringField variant, "CONTENT_AUTHORITY", variant.applicationId + ".provider"
    }
}

dependencies {
    compile "com.android.support:support-compat:$libraryVersion.support"
    compile "com.android.support:support-core-utils:$libraryVersion.support"
    compile "com.android.support:support-core-ui:$libraryVersion.support"
    compile "com.android.support:support-fragment:$libraryVersion.support"
    compile "com.android.support:appcompat-v7:$libraryVersion.support"
    compile "com.android.support:design:$libraryVersion.support"
    compile "com.android.support:support-annotations:$libraryVersion.support"
    compile "com.android.support:preference-v7:$libraryVersion.support"
    compile "com.android.support:preference-v14:$libraryVersion.support"
    compile "com.android.support:recyclerview-v7:$libraryVersion.support"
    compile "com.android.support:preference-v14:$libraryVersion.support"

    compile "com.google.android.gms:play-services-wearable:$libraryVersion.playService"
    compile "com.google.android.gms:play-services-drive:$libraryVersion.playService"

    compile "com.google.firebase:firebase-core:$libraryVersion.firebase"
    compile "com.google.firebase:firebase-crash:$libraryVersion.firebase"

    compile "com.google.code.gson:gson:$libraryVersion.gson"

    compile "joda-time:joda-time:$libraryVersion.jodaTime"

    compile "com.squareup.okhttp3:okhttp:$libraryVersion.okhttp"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$libraryVersion.okhttp"

    compile "com.squareup.retrofit2:retrofit:$libraryVersion.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$libraryVersion.retrofit"

    compile "com.squareup.picasso:picasso:$libraryVersion.picasso"

    compile "frankiesardo:icepick:$libraryVersion.icepick"
    provided "frankiesardo:icepick-processor:$libraryVersion.icepick"

    compile "com.github.hotchemi:permissionsdispatcher:$libraryVersion.permissionsdispatcher"
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:$libraryVersion.permissionsdispatcher"

    compile "org.parceler:parceler-api:$libraryVersion.parceler"
    annotationProcessor "org.parceler:parceler:$libraryVersion.parceler"

    compile "com.anjlab.android.iab.v3:library:$libraryVersion.iab"

    compile "com.github.PhilJay:MPAndroidChart:$libraryVersion.mpAndroidChart"

    compile "com.github.clans:fab:$libraryVersion.clansFab"

    compile "org.adw.library:discrete-seekbar:$libraryVersion.discreteSeekbar"

    compile "com.github.jkwiecien:EasyImage:$libraryVersion.easyImage"

    compile "com.afollestad.material-dialogs:core:$libraryVersion.materialDialogs"

    compile "com.github.medyo:android-about-page:$libraryVersion.aboutPage"

    compile "com.github.oriley-me.homage:homage-core:$libraryVersion.homage"
    compile "com.github.oriley-me.homage:homage-recyclerview:$libraryVersion.homage"

    compile "com.makeramen:roundedimageview:$libraryVersion.roundedImageView"

    compile "agency.tango.android:material-intro-screen:$libraryVersion.materialIntroScreen"

    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:$libraryVersion.dbFlow"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:$libraryVersion.dbFlow"
    compile "com.github.Raizlabs.DBFlow:dbflow:$libraryVersion.dbFlow"

    compile project(':shared')
    wearApp project(':wearable')

    androidTestCompile "com.google.truth:truth:$libraryVersion.truth"
    androidTestCompile "com.google.code.findbugs:jsr305:$libraryVersion.findbugs"
    androidTestCompile "com.android.support:support-annotations:$libraryVersion.support"
    androidTestCompile "com.android.support.test:runner:$libraryVersion.testSupport"
    androidTestCompile "com.android.support.test:rules:$libraryVersion.testSupport"
    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:$libraryVersion.uiAutomator"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$libraryVersion.espresso", {
        exclude group: 'com.android.support'
    })
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$libraryVersion.espresso", {
        exclude group: 'com.android.support'
    })
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$libraryVersion.espresso"
    androidTestScreengrabCompile "tools.fastlane:screengrab:$libraryVersion.screengrab"
}

// Must be at the bottom
apply plugin: 'com.google.gms.google-services'