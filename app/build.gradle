apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "de.dreier.mytargets"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode versionCode
        versionName versionName
    }

    if (new File("gradle.properties").exists()) {
        signingConfigs {
            release {
                try {
                    storeFile file(KEYSTORE)
                    storePassword KEYSTORE_PASSWORD
                    keyAlias KEY_ALIAS
                    keyPassword KEY_PASSWORD
                } catch (ignored) {
                    throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
                }
            }
        }

        buildTypes {
            debug {
                signingConfig signingConfigs.release
                minifyEnabled false
            }
            release {
                signingConfig signingConfigs.release
                shrinkResources true
                //minifyEnabled true
                //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }
}

if (new File("gradle.properties").exists()) {
    task crowdinAppUpload(group: "crowdin", type: UploadSourceFileTask) {
        apiKey = CROWDIN_API_KEY
        projectId = CROWDIN_PROJECT_ID
        alias = 'strings.xml'
        sourceFile = './app/src/main/res/values/strings.xml'
    }

    afterEvaluate {
        preReleaseBuild.dependsOn crowdinAppUpload
    }
}

dependencies {
    compile "com.android.support:support-v4:$supportLibVersion"
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:support-annotations:$supportLibVersion"
    compile "com.android.support:preference-v7:$supportLibVersion"
    compile "com.android.support:preference-v14:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"
    compile "com.android.support:preference-v14:$supportLibVersion"

    compile 'com.jakewharton:butterknife:7.0.1'

    compile "com.google.android.gms:play-services-wearable:$playServiceVersion"

    compile 'com.github.ksoichiro:android-observablescrollview:1.5.2'
    compile 'com.bignerdranch.android:recyclerview-multiselect:0.2'
    compile 'de.psdev.licensesdialog:licensesdialog:1.7.0'
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.6'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'org.adw.library:discrete-seekbar:1.0.1'

    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'

    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.1'

    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'

    compile project(':shared')
    wearApp project(':wearable')
}


import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.content.FileBody

class UploadSourceFileTask extends DefaultTask {
    def apiKey
    def projectId
    def alias
    def sourceFile

    @SuppressWarnings(["unchecked", "GrUnresolvedAccess"])
    @TaskAction
    def uploadSourceFile() {

        def updateFilePath = sprintf('http://api.crowdin.net/api/project/%s/update-file?key=%s', [projectId, apiKey])

        def http = new HTTPBuilder(updateFilePath)

        http.handler.failure = { resp, reader ->
            println "Could not upload file: ${resp.statusLine}"
            println reader
            throw new GradleException("Could not upload file: ${resp.statusLine} \r\n " + reader)
        }

        http.request(Method.POST, ContentType.ANY) { req ->
            //uri.path = updateFilePath
            //requestContentType = 'multipart/form-data'
            MultipartEntity entity = new MultipartEntity()
            def file = new File(sourceFile)
            entity.addPart("files[" + alias + "]", new FileBody(file))
            req.entity = entity

            response.success = { resp, json ->
                println file.getName() + " uploaded to crowdin"
            }
        }
    }
}
