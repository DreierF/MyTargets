/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.sharing;

import com.dropbox.core.DbxException;

/**
 * The request builder returned by {@link
 * DbxUserSharingRequests#shareFolderBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class ShareFolderBuilder {
    private final DbxUserSharingRequests _client;
    private final ShareFolderArg.Builder _builder;

    /**
     * Creates a new instance of this builder.
     *
     * @param _client  Dropbox namespace-specific client used to issue sharing
     *     requests.
     * @param _builder  Request argument builder.
     *
     * @return instsance of this builder
     */
    ShareFolderBuilder(DbxUserSharingRequests _client, ShareFolderArg.Builder _builder) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        if (_builder == null) {
            throw new NullPointerException("_builder");
        }
        this._builder = _builder;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code
     * MemberPolicy.ANYONE}. </p>
     *
     * @param memberPolicy  Who can be a member of this shared folder. Only
     *     applicable if the current user is on a team. Must not be {@code
     *     null}. Defaults to {@code MemberPolicy.ANYONE} when set to {@code
     *     null}.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public ShareFolderBuilder withMemberPolicy(MemberPolicy memberPolicy) {
        this._builder.withMemberPolicy(memberPolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code
     * AclUpdatePolicy.OWNER}. </p>
     *
     * @param aclUpdatePolicy  Who can add and remove members of this shared
     *     folder. Must not be {@code null}. Defaults to {@code
     *     AclUpdatePolicy.OWNER} when set to {@code null}.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public ShareFolderBuilder withAclUpdatePolicy(AclUpdatePolicy aclUpdatePolicy) {
        this._builder.withAclUpdatePolicy(aclUpdatePolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code
     * SharedLinkPolicy.ANYONE}. </p>
     *
     * @param sharedLinkPolicy  The policy to apply to shared links created for
     *     content inside this shared folder.  The current user must be on a
     *     team to set this policy to {@link SharedLinkPolicy#MEMBERS}. Must not
     *     be {@code null}. Defaults to {@code SharedLinkPolicy.ANYONE} when set
     *     to {@code null}.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public ShareFolderBuilder withSharedLinkPolicy(SharedLinkPolicy sharedLinkPolicy) {
        this._builder.withSharedLinkPolicy(sharedLinkPolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code false}. </p>
     *
     * @param forceAsync  Whether to force the share to happen asynchronously.
     *     Defaults to {@code false} when set to {@code null}.
     *
     * @return this builder
     */
    public ShareFolderBuilder withForceAsync(Boolean forceAsync) {
        this._builder.withForceAsync(forceAsync);
        return this;
    }

    /**
     * Issues the request.
     */
    public ShareFolderLaunch start() throws ShareFolderErrorException, DbxException {
        ShareFolderArg arg_ = this._builder.build();
        return _client.shareFolder(arg_);
    }
}
