/*
 * Copyright (C) 2016 Florian Dreier
 *
 * This file is part of MyTargets.
 *
 * MyTargets is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * MyTargets is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'me.tatarka:gradle-retrolambda:3.4.0'
        classpath 'com.mendhak.gradlecrowdin:crowdin-plugin:0.0.9'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
        classpath 'com.github.triplet.gradle:play-publisher:1.1.5'
        classpath 'org.ajoberstar:grgit:1.7.1'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.1'
    }

    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

plugins {
    id 'com.mendhak.gradlecrowdin' version '0.0.9'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

ext {
    compileSdkVersionCode = 25
    buildToolsVersionCode = '25.0.2'
    supportLibVersion = '25.1.0'
    testSupportLibVersion = '0.5'
    playServiceVersion = '10.0.1'
    espressoVersion = '2.2.2'
    parcelerVersion = '1.1.6'
    jodaTimeVersion = '2.9.6'
    dbFlowVersion = '3.1.1'
    git = Grgit.open()
    appVersionCode = Integer.parseInt("${git.tag.list().size()}")
    appVersionName = "${git.describe()}"
            .replace("v", "")
            .replace("_b", "-Beta")
            .replace("_rc", "-RC")
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://clojars.org/repo/' }
    }
}

apply from: "crowdin.gradle"

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}